<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="/public/assets/scrollerStyles.css" type="text/css" />
    <link rel="stylesheet" href="/public/assets/indexStyles.css" type="text/css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>MIFY SideScroller</title>
</head>
<body>

  <div id="scrollerContainer">
    <canvas id="scrollerCanvas" width="800px" height="450px" autofocus></canvas>
</div>


    <div id="headContainer">
        <a href="index"><img src="/public/images/mify.png" id="logo"></a>
    </div>
        <div id="arcadeHeader">
            <div id="myLinks">
                <a href="index">Home</a>
                <a href="pong">Pong</a>
                <a href="froggerP">Frogger</a>
            </div>
            <a href="javascript:void(0);" class="icon" onclick="hamburgerFunction()">
                <i class="fa fa-bars" style="color:#80ced6"></i>
            </a>
        </div>


</body>

<script>
  function hamburgerFunction () {
    var x = document.getElementById("myLinks");
    if (x.style.display === "block") {
      x.style.display = "none";
    } else {
      x.style.display = "block";
    }
}
</script>

<script id="main">
window.addEventListener("keydown", function(e) {
    // space and arrow keys
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
}, false);

    window.addEventListener("load", function(event) {
"use strict";
//// CONSTANTS ////
/* Each zone has a url that looks like: zoneXX.json, where XX is the current zone
identifier. When loading zones, I use the game.world's zone identifier with these
two constants to construct a url that points to the appropriate zone file. */
/* I updated this after I made the video. I decided to move the zone files into
the 06 folder because I won't be using these levels again in future parts. */
const ZONE_PREFIX = "zone";
const ZONE_SUFFIX = ".json";
    /////////////////
  //// CLASSES ////
/////////////////
const AssetsManager = function() {
  this.tile_set_image = undefined;
};
AssetsManager.prototype = {
  constructor: Game.AssetsManager,
  /* Requests a file and hands the callback function the contents of that file
  parsed by JSON.parse. */
  requestJSON:function(url, callback) {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function(event) {
      callback(JSON.parse(this.responseText));
    }, { once:true });
    request.open("GET", url);
    request.send();
  },
  /* Creates a new Image and sets its src attribute to the specified url. When
  the image loads, the callback function is called. */
  requestImage:function(url, callback) {
    let image = new Image();
    image.addEventListener("load", function(event) {
      callback(image);
    }, { once:true });
    image.src = url;
  },
};
    ///////////////////
  //// FUNCTIONS ////
///////////////////
var keyDownUp = function(event) {
  controller.keyDownUp(event.type, event.keyCode);
};
var resize = function(event) {
//   display.resize(document.documentElement.clientWidth, document.documentElement.clientHeight, game.world.height / game.world.width);
  display.render();
};
var render = function() {
  display.drawMap   (assets_manager.tile_set_image,
  game.world.tile_set.columns, game.world.graphical_map, game.world.columns,  game.world.tile_set.tile_size);
  let frame = game.world.tile_set.frames[game.world.player.frame_value];
  display.drawObject(assets_manager.tile_set_image,
  frame.x, frame.y,
  game.world.player.x + Math.floor(game.world.player.width * 0.5 - frame.width * 0.5) + frame.offset_x,
  game.world.player.y + frame.offset_y, frame.width, frame.height);
  display.render();
};
var update = function() {
  if (controller.left.active ) { game.world.player.moveLeft ();                               }
  if (controller.right.active) { game.world.player.moveRight();                               }
  if (controller.up.active   ) { game.world.player.jump();      controller.up.active = false; }
  game.update();
  /* This if statement checks to see if a door has been selected by the player.
  If the player collides with a door, he selects it. The engine is then stopped
  and the assets_manager loads the door's level. */
  if (game.world.door) {
    engine.stop();
    /* Here I'm requesting the JSON file to use to populate the game.world object. */
    assets_manager.requestJSON(ZONE_PREFIX + game.world.door.destination_zone + ZONE_SUFFIX, (zone) => {
      game.world.setup(zone);
      engine.start();
    });
    return;
  }
};
    /////////////////
  //// OBJECTS ////
/////////////////
var assets_manager = new AssetsManager();
var controller     = new Controller();
var display        = new Display(document.querySelector("canvas"));
var game           = new Game();
var engine         = new Engine(1000/30, render, update);
    ////////////////////
  //// INITIALIZE ////
////////////////////
display.buffer.canvas.height = game.world.height;
display.buffer.canvas.width  = game.world.width;
display.buffer.imageSmoothingEnabled = false;
assets_manager.requestJSON(ZONE_PREFIX + game.world.zone_id + ZONE_SUFFIX, (zone) => {
  game.world.setup(zone);
  assets_manager.requestImage("/public/images/amns-BG-01.png", (image) => {
    assets_manager.tile_set_image = image;
    resize();
    engine.start();
  });
});
window.addEventListener("keydown", keyDownUp);
window.addEventListener("keyup"  , keyDownUp);
window.addEventListener("resize" , resize);
});
</script>

<script id="controller">
    const Controller = function() {
        this.left  = new Controller.ButtonInput();
        this.right = new Controller.ButtonInput();
        this.up    = new Controller.ButtonInput();
        this.keyDownUp = function(type, key_code) {
            var down = (type == "keydown") ? true : false;
            switch(key_code) {
                case 37: this.left.getInput(down);  break;
                case 38: this.up.getInput(down);    break;
                case 39: this.right.getInput(down);
            }
        };
    };
    Controller.prototype = {
        constructor : Controller
    };
    Controller.ButtonInput = function() {
        this.active = this.down = false;
    };
    Controller.ButtonInput.prototype = {
        constructor : Controller.ButtonInput,
        getInput : function(down) {
            if (this.down != down) this.active = down;
            this.down = down;
        }
    };
</script>
<script id="display">
const Display = function(canvas) {
this.buffer  = document.createElement("canvas").getContext("2d"),
this.context = canvas.getContext("2d");
/* This function draws the map to the buffer. */
this.drawMap = function(image, image_columns, map, map_columns, tile_size) {
  for (let index = map.length - 1; index > -1; -- index) {
    let value         = map[index];
    let source_x      =           (value % image_columns) * tile_size;
    let source_y      = Math.floor(value / image_columns) * tile_size;
    let destination_x =           (index % map_columns  ) * tile_size;
    let destination_y = Math.floor(index / map_columns  ) * tile_size;
    this.buffer.drawImage(image, source_x, source_y, tile_size, tile_size, destination_x, destination_y, tile_size, tile_size);
  }
};
this.drawObject = function(image, source_x, source_y, destination_x, destination_y, width, height) {
  this.buffer.drawImage(image, source_x, source_y, width, height, Math.round(destination_x), Math.round(destination_y), width, height);
};
this.resize = function(width, height, height_width_ratio) {
  if (height / width > height_width_ratio) {
    this.context.canvas.height = width * height_width_ratio;
    this.context.canvas.width  = width;
  } else {
    this.context.canvas.height = height;
    this.context.canvas.width  = height / height_width_ratio;
  }
  this.context.imageSmoothingEnabled = false;
};
};
Display.prototype = {
constructor : Display,
render:function() { this.context.drawImage(this.buffer.canvas, 0, 0, this.buffer.canvas.width, this.buffer.canvas.height, 0, 0, this.context.canvas.width, this.context.canvas.height); },
};
</script>
<script id="game">
    const Game = function() {
this.world    = new Game.World();
this.update   = function() {
  this.world.update();
};
};
Game.prototype = { constructor : Game };
Game.Animator = function(frame_set, delay) {
this.count       = 0;
this.delay       = (delay >= 1) ? delay : 1;
this.frame_set   = frame_set;
this.frame_index = 0;
this.frame_value = frame_set[0];
this.mode        = "pause";
};
Game.Animator.prototype = {
constructor:Game.Animator,
animate:function() {
 switch(this.mode) {
   case "loop" : this.loop(); break;
   case "pause":              break;
 }
},
changeFrameSet(frame_set, mode, delay = 10, frame_index = 0) {
 if (this.frame_set === frame_set) { return; }
 this.count       = 0;
 this.delay       = delay;
 this.frame_set   = frame_set;
 this.frame_index = frame_index;
 this.frame_value = frame_set[frame_index];
 this.mode        = mode;
},
loop:function() {
 this.count ++;
 while(this.count > this.delay) {
   this.count -= this.delay;
   this.frame_index = (this.frame_index < this.frame_set.length - 1) ? this.frame_index + 1 : 0;
   this.frame_value = this.frame_set[this.frame_index];
 }
}
};
Game.Collider = function() {
/* I changed this so all the checks happen in y first order. */
this.collide = function(value, object, tile_x, tile_y, tile_size) {
  switch(value) {
    case  1:     this.collidePlatformTop    (object, tile_y            ); break;
    case  2:     this.collidePlatformRight  (object, tile_x + tile_size); break;
    case  3: if (this.collidePlatformTop    (object, tile_y            )) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
    case  4:     this.collidePlatformBottom (object, tile_y + tile_size); break;
    case  5: if (this.collidePlatformTop    (object, tile_y            )) return;
                 this.collidePlatformBottom (object, tile_y + tile_size); break;
    case  6: if (this.collidePlatformRight  (object, tile_x + tile_size)) return;
                 this.collidePlatformBottom (object, tile_y + tile_size); break;
    case  7: if (this.collidePlatformTop    (object, tile_y            )) return;
             if (this.collidePlatformBottom (object, tile_y + tile_size)) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
    case  8:     this.collidePlatformLeft   (object, tile_x            ); break;
    case  9: if (this.collidePlatformTop    (object, tile_y            )) return;
                 this.collidePlatformLeft   (object, tile_x            ); break;
    case 10: if (this.collidePlatformLeft   (object, tile_x            )) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
    case 11: if (this.collidePlatformTop    (object, tile_y            )) return;
             if (this.collidePlatformLeft   (object, tile_x            )) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
    case 12: if (this.collidePlatformBottom (object, tile_y + tile_size)) return;
                 this.collidePlatformLeft   (object, tile_x            ); break;
    case 13: if (this.collidePlatformTop    (object, tile_y            )) return;
             if (this.collidePlatformBottom (object, tile_y + tile_size)) return;
                 this.collidePlatformLeft   (object, tile_x            ); break;
    case 14: if (this.collidePlatformBottom (object, tile_y + tile_size)) return;
             if (this.collidePlatformLeft   (object, tile_x            )) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
    case 15: if (this.collidePlatformTop    (object, tile_y            )) return;
             if (this.collidePlatformBottom (object, tile_y + tile_size)) return;
             if (this.collidePlatformLeft   (object, tile_x            )) return;
                 this.collidePlatformRight  (object, tile_x + tile_size); break;
  }
}
};
Game.Collider.prototype = {
constructor: Game.Collider,
collidePlatformBottom:function(object, tile_bottom) {
  if (object.getTop() < tile_bottom && object.getOldTop() >= tile_bottom) {
    object.setTop(tile_bottom);
    object.velocity_y = 0;
    return true;
  } return false;
},
collidePlatformLeft:function(object, tile_left) {
  if (object.getRight() > tile_left && object.getOldRight() <= tile_left) {
    object.setRight(tile_left - 0.01);
    object.velocity_x = 0;
    return true;
  } return false;
},
collidePlatformRight:function(object, tile_right) {
  if (object.getLeft() < tile_right && object.getOldLeft() >= tile_right) {
    object.setLeft(tile_right);
    object.velocity_x = 0;
    return true;
  } return false;
},
collidePlatformTop:function(object, tile_top) {
  if (object.getBottom() > tile_top && object.getOldBottom() <= tile_top) {
    object.setBottom(tile_top - 0.01);
    object.velocity_y = 0;
    object.jumping    = false;
    return true;
  } return false;
}
};
Game.Frame = function(x, y, width, height, offset_x, offset_y) {
this.x        = x;
this.y        = y;
this.width    = width;
this.height   = height;
this.offset_x = offset_x;
this.offset_y = offset_y;
};
Game.Frame.prototype = { constructor: Game.Frame };
Game.Object = function(x, y, width, height) {
this.height = height;
this.width  = width;
this.x      = x;
this.y      = y;
};
/* I added getCenterX, getCenterY, setCenterX, and setCenterY */
Game.Object.prototype = {
constructor:Game.Object,
getBottom : function()  { return this.y + this.height;       },
getCenterX: function()  { return this.x + this.width  * 0.5; },
getCenterY: function()  { return this.y + this.height * 0.5; },
getLeft   : function()  { return this.x;                     },
getRight  : function()  { return this.x + this.width;        },
getTop    : function()  { return this.y;                     },
setBottom : function(y) { this.y = y - this.height;          },
setCenterX: function(x) { this.x = x - this.width  * 0.5;    },
setCenterY: function(y) { this.y = y - this.height * 0.5;    },
setLeft   : function(x) { this.x = x;                        },
setRight  : function(x) { this.x = x - this.width;           },
setTop    : function(y) { this.y = y;                        }
};
Game.MovingObject = function(x, y, width, height, velocity_max = 15) {
Game.Object.call(this, x, y, width, height);
this.jumping      = false;
this.velocity_max = velocity_max;// added velocity_max so velocity can't go past 16
this.velocity_x   = 0;
this.velocity_y   = 0;
this.x_old        = x;
this.y_old        = y;
};
/* I added setCenterX, setCenterY, getCenterX, and getCenterY */
Game.MovingObject.prototype = {
getOldBottom : function()  { return this.y_old + this.height;       },
getOldCenterX: function()  { return this.x_old + this.width  * 0.5; },
getOldCenterY: function()  { return this.y_old + this.height * 0.5; },
getOldLeft   : function()  { return this.x_old;                     },
getOldRight  : function()  { return this.x_old + this.width;        },
getOldTop    : function()  { return this.y_old;                     },
setOldBottom : function(y) { this.y_old = y    - this.height;       },
setOldCenterX: function(x) { this.x_old = x    - this.width  * 0.5; },
setOldCenterY: function(y) { this.y_old = y    - this.height * 0.5; },
setOldLeft   : function(x) { this.x_old = x;                        },
setOldRight  : function(x) { this.x_old = x    - this.width;        },
setOldTop    : function(y) { this.y_old = y;                        }
};
Object.assign(Game.MovingObject.prototype, Game.Object.prototype);
Game.MovingObject.prototype.constructor = Game.MovingObject;
Game.Door = function(door) {
Game.Object.call(this, door.x, door.y, door.width, door.height);
this.destination_x    = door.destination_x;
this.destination_y    = door.destination_y;
this.destination_zone = door.destination_zone;
};
Game.Door.prototype = {
/* Tests for collision between this door object and a MovingObject. */
collideObject(object) {
 let center_x = object.getCenterX();
 let center_y = object.getCenterY();
 if (center_x < this.getLeft() || center_x > this.getRight() ||
     center_y < this.getTop()  || center_y > this.getBottom()) return false;
 return true;
}
};
Object.assign(Game.Door.prototype, Game.Object.prototype);
Game.Door.prototype.constructor = Game.Door;
Game.Player = function(x, y) {
Game.MovingObject.call(this, x, y, 7, 12);
Game.Animator.call(this, Game.Player.prototype.frame_sets["idle-left"], 10);
this.jumping     = true;
this.direction_x = -1;
this.velocity_x  = 0;
this.velocity_y  = 0;
};
Game.Player.prototype = {
frame_sets: {
  "idle-left" : [0],
  "jump-left" : [1],
  "move-left" : [2, 3, 4, 5],
  "idle-right": [6],
  "jump-right": [7],
  "move-right": [8, 9, 10, 11]
},
jump: function() {
  /* Made it so you can only jump if you aren't falling faster than 10px per frame. */
  if (!this.jumping && this.velocity_y < 10) {
    this.jumping     = true;
    this.velocity_y -= 13;
  }
},
moveLeft: function() {
  this.direction_x = -1;
  this.velocity_x -= 0.55;
},
moveRight:function(frame_set) {
  this.direction_x = 1;
  this.velocity_x += 0.55;
},
updateAnimation:function() {
  if (this.velocity_y < 0) {
    if (this.direction_x < 0) this.changeFrameSet(this.frame_sets["jump-left"], "pause");
    else this.changeFrameSet(this.frame_sets["jump-right"], "pause");
  } else if (this.direction_x < 0) {
    if (this.velocity_x < -0.1) this.changeFrameSet(this.frame_sets["move-left"], "loop", 5);
    else this.changeFrameSet(this.frame_sets["idle-left"], "pause");
  } else if (this.direction_x > 0) {
    if (this.velocity_x > 0.1) this.changeFrameSet(this.frame_sets["move-right"], "loop", 5);
    else this.changeFrameSet(this.frame_sets["idle-right"], "pause");
  }
  this.animate();
},
updatePosition:function(gravity, friction) {
  this.x_old = this.x;
  this.y_old = this.y;
  this.velocity_y += gravity;
  this.velocity_x *= friction;
  /* Made it so that velocity cannot exceed velocity_max */
  if (Math.abs(this.velocity_x) > this.velocity_max)
  this.velocity_x = this.velocity_max * Math.sign(this.velocity_x);
  if (Math.abs(this.velocity_y) > this.velocity_max)
  this.velocity_y = this.velocity_max * Math.sign(this.velocity_y);
  this.x    += this.velocity_x;
  this.y    += this.velocity_y;
}
};
Object.assign(Game.Player.prototype, Game.MovingObject.prototype);
Object.assign(Game.Player.prototype, Game.Animator.prototype);
Game.Player.prototype.constructor = Game.Player;
Game.TileSet = function(columns, tile_size) {
this.columns    = columns;
this.tile_size  = tile_size;
let f = Game.Frame;
this.frames = [new f(115,  96, 13, 16, 0, -4), // idle-left
               new f( 50,  96, 13, 16, 0, -4), // jump-left
               new f(102,  96, 13, 16, 0, -4), new f(89, 96, 13, 16, 0, -4), new f(76, 96, 13, 16, 0, -4), new f(63, 96, 13, 16, 0, -4), // walk-left
               new f(  0, 112, 13, 16, 0, -4), // idle-right
               new f( 65, 112, 13, 16, 0, -4), // jump-right
               new f( 13, 112, 13, 16, 0, -4), new f(26, 112, 13, 16, 0, -4), new f(39, 112, 13, 16, 0, -4), new f(52, 112, 13, 16, 0, -4) // walk-right
              ];
};
Game.TileSet.prototype = { constructor: Game.TileSet };
Game.World = function(friction = 0.85, gravity = 2) {
this.collider  = new Game.Collider();
this.friction  = friction;
this.gravity   = gravity;
this.columns   = 12;
this.rows      = 9;
this.tile_set  = new Game.TileSet(8, 16);
this.player    = new Game.Player(32, 76);
this.zone_id   = "00";// The current zone.
this.doors     = [];// The array of doors in the level.
this.door      = undefined; // If the player enters a door, the game will set this property to that door and the level will be loaded.
this.height    = this.tile_set.tile_size * this.rows;
this.width     = this.tile_set.tile_size * this.columns;
};
Game.World.prototype = {
constructor: Game.World,
collideObject:function(object) {
  /* I got rid of the world boundary collision. Now it's up to the tiles to keep
  the player from falling out of the world. */
  var bottom, left, right, top, value;
  top    = Math.floor(object.getTop()    / this.tile_set.tile_size);
  left   = Math.floor(object.getLeft()   / this.tile_set.tile_size);
  value  = this.collision_map[top * this.columns + left];
  this.collider.collide(value, object, left * this.tile_set.tile_size, top * this.tile_set.tile_size, this.tile_set.tile_size);
  top    = Math.floor(object.getTop()    / this.tile_set.tile_size);
  right  = Math.floor(object.getRight()  / this.tile_set.tile_size);
  value  = this.collision_map[top * this.columns + right];
  this.collider.collide(value, object, right * this.tile_set.tile_size, top * this.tile_set.tile_size, this.tile_set.tile_size);
  bottom = Math.floor(object.getBottom() / this.tile_set.tile_size);
  left   = Math.floor(object.getLeft()   / this.tile_set.tile_size);
  value  = this.collision_map[bottom * this.columns + left];
  this.collider.collide(value, object, left * this.tile_set.tile_size, bottom * this.tile_set.tile_size, this.tile_set.tile_size);
  bottom = Math.floor(object.getBottom() / this.tile_set.tile_size);
  right  = Math.floor(object.getRight()  / this.tile_set.tile_size);
  value  = this.collision_map[bottom * this.columns + right];
  this.collider.collide(value, object, right * this.tile_set.tile_size, bottom * this.tile_set.tile_size, this.tile_set.tile_size);
},
/* The setup function takes a zone object generated from a zoneXX.json file. It
sets all the world values to values of zone. If the player just passed through a
door, it uses the this.door variable to change the player's location to wherever
that door's destination goes. */
setup:function(zone) {
  /* Get the new tile maps, the new zone, and reset the doors array. */
  this.graphical_map      = zone.graphical_map;
  this.collision_map      = zone.collision_map;
  this.columns            = zone.columns;
  this.rows               = zone.rows;
  this.doors              = new Array();
  this.zone_id            = zone.id;
  /* Generate new doors. */
  for (let index = zone.doors.length - 1; index > -1; -- index) {
    let door = zone.doors[index];
    this.doors[index] = new Game.Door(door);
  }
  /* If the player entered into a door, this.door will reference that door. Here
  it will be used to set the player's location to the door's destination. */
  if (this.door) {
    /* if a destination is equal to -1, that means it won't be used. Since each zone
    spans from 0 to its width and height, any negative number would be invalid. If
    a door's destination is -1, the player will keep his current position for that axis. */
    if (this.door.destination_x != -1) {
      this.player.setCenterX   (this.door.destination_x);
      this.player.setOldCenterX(this.door.destination_x);// It's important to reset the old position as well.
    }
    if (this.door.destination_y != -1) {
      this.player.setCenterY   (this.door.destination_y);
      this.player.setOldCenterY(this.door.destination_y);
    }
    this.door = undefined;// Make sure to reset this.door so we don't trigger a zone load.
  }
},
update:function() {
  this.player.updatePosition(this.gravity, this.friction);
  this.collideObject(this.player);
  /* Here we loop through all the doors in the current zone and check to see
  if the player is colliding with any. If he does collide with one, we set the
  world's door variable equal to that door, so we know to use it to load the next zone. */
  for(let index = this.doors.length - 1; index > -1; -- index) {
    let door = this.doors[index];
    if (door.collideObject(this.player)) {
      this.door = door;
    };
  }
  this.player.updateAnimation();
}
};
</script>
<script id="engine">
    const Engine = function(time_step, update, render) {
    this.accumulated_time        = 0;
    this.animation_frame_request = undefined,
    this.time                    = undefined,
    this.time_step               = time_step,
    this.updated = false;
    this.update = update;
    this.render = render;
    this.run = function(time_stamp) {
    /* I moved this line from the bottom of this function to the top. This is better
    anyway, because it ensures that if my game logic runs too long, a new frame will
    already be requested before 30 or 60 frames pass and I miss a request entirely.
    This could cause a "spiral of death" for my CPU, but since I have the frame dropping
    safety if statement, this probably won't crash the user's computer. */
    this.animation_frame_request = window.requestAnimationFrame(this.handleRun);
    this.accumulated_time += time_stamp - this.time;
    this.time = time_stamp;
    /* This is the safety if statement. */
    if (this.accumulated_time >= this.time_step * 3) {
        this.accumulated_time = this.time_step;
    }
    while(this.accumulated_time >= this.time_step) {
        this.accumulated_time -= this.time_step;
        this.update(time_stamp);
        this.updated = true;
    }
    if (this.updated) {
        this.updated = false;
        this.render(time_stamp);
    }
    };
    this.handleRun = (time_step) => { this.run(time_step); };
    };
    Engine.prototype = {
    constructor:Engine,
    start:function() {
    this.accumulated_time = this.time_step;
    this.time = window.performance.now();
    this.animation_frame_request = window.requestAnimationFrame(this.handleRun);
    },
    stop:function() { window.cancelAnimationFrame(this.animation_frame_request); }
    };
</script>

</html>
